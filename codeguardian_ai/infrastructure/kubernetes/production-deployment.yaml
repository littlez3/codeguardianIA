# CodeGuardian AI v3.0.0 Enterprise - Complete Kubernetes Deployment
# Production-ready Kubernetes manifests with auto-scaling, monitoring, and security

apiVersion: v1
kind: Namespace
metadata:
  name: codeguardian
  labels:
    name: codeguardian
    environment: production
    version: v3.0.0

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: codeguardian-config
  namespace: codeguardian
  labels:
    app: codeguardian
    component: config
data:
  ENVIRONMENT: "production"
  LOG_LEVEL: "info"
  WORKERS: "4"
  MAX_WORKERS: "8"
  WORKER_CONNECTIONS: "1000"
  MAX_REQUESTS: "1000"
  TIMEOUT: "30"
  KEEPALIVE: "5"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  DATABASE_HOST: "postgres-service"
  DATABASE_PORT: "5432"
  DATABASE_NAME: "codeguardian"
  ALLOWED_ORIGINS: "https://app.codeguardian.ai,https://dashboard.codeguardian.ai"
  RATE_LIMIT_REQUESTS: "1000"
  RATE_LIMIT_WINDOW: "3600"
  CACHE_TTL: "3600"
  JWT_ALGORITHM: "HS256"
  JWT_EXPIRATION: "86400"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: codeguardian-secrets
  namespace: codeguardian
  labels:
    app: codeguardian
    component: secrets
type: Opaque
data:
  # Base64 encoded values (replace with actual values)
  JWT_SECRET_KEY: eW91ci1zZWNyZXQta2V5LWNoYW5nZS1pbi1wcm9kdWN0aW9u
  DATABASE_PASSWORD: cGFzc3dvcmQ=
  REDIS_PASSWORD: cGFzc3dvcmQ=
  API_KEY: YXBpLWtleS1jaGFuZ2UtaW4tcHJvZHVjdGlvbg==

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: codeguardian
  labels:
    app: postgres
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: codeguardian-config
              key: DATABASE_NAME
        - name: POSTGRES_USER
          value: "codeguardian"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: codeguardian-secrets
              key: DATABASE_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - codeguardian
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - codeguardian
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: codeguardian
  labels:
    app: postgres
    component: database
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# PostgreSQL PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: codeguardian
  labels:
    app: postgres
    component: storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp2

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: codeguardian
  labels:
    app: redis
    component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        component: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --maxmemory
        - 256mb
        - --maxmemory-policy
        - allkeys-lru
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: codeguardian-secrets
              key: REDIS_PASSWORD
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: codeguardian
  labels:
    app: redis
    component: cache
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# CodeGuardian API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: codeguardian-api
  namespace: codeguardian
  labels:
    app: codeguardian
    component: api
    version: v3.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: codeguardian
      component: api
  template:
    metadata:
      labels:
        app: codeguardian
        component: api
        version: v3.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: codeguardian-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: api
        image: codeguardian/api:v3.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: PORT
          value: "8000"
        envFrom:
        - configMapRef:
            name: codeguardian-config
        - secretRef:
            name: codeguardian-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: cache
          mountPath: /app/cache
        - name: data
          mountPath: /app/data
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: logs
        emptyDir: {}
      - name: cache
        emptyDir: {}
      - name: data
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: codeguardian-service-account
  namespace: codeguardian
  labels:
    app: codeguardian

---
# CodeGuardian API Service
apiVersion: v1
kind: Service
metadata:
  name: codeguardian-service
  namespace: codeguardian
  labels:
    app: codeguardian
    component: api
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/health"
spec:
  selector:
    app: codeguardian
    component: api
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  - name: https
    port: 443
    targetPort: 8000
    protocol: TCP
  type: LoadBalancer
  sessionAffinity: None

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: codeguardian-hpa
  namespace: codeguardian
  labels:
    app: codeguardian
    component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: codeguardian-api
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: codeguardian-pdb
  namespace: codeguardian
  labels:
    app: codeguardian
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: codeguardian
      component: api

---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: codeguardian-network-policy
  namespace: codeguardian
  labels:
    app: codeguardian
spec:
  podSelector:
    matchLabels:
      app: codeguardian
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: codeguardian-ingress
  namespace: codeguardian
  labels:
    app: codeguardian
    component: ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.codeguardian.ai
    secretName: codeguardian-tls
  rules:
  - host: api.codeguardian.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: codeguardian-service
            port:
              number: 80

---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: codeguardian-metrics
  namespace: codeguardian
  labels:
    app: codeguardian
    component: monitoring
spec:
  selector:
    matchLabels:
      app: codeguardian
      component: api
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s

---
# RBAC - Role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: codeguardian-role
  namespace: codeguardian
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---
# RBAC - RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: codeguardian-rolebinding
  namespace: codeguardian
subjects:
- kind: ServiceAccount
  name: codeguardian-service-account
  namespace: codeguardian
roleRef:
  kind: Role
  name: codeguardian-role
  apiGroup: rbac.authorization.k8s.io

---
# Resource Quota
apiVersion: v1
kind: ResourceQuota
metadata:
  name: codeguardian-quota
  namespace: codeguardian
spec:
  hard:
    requests.cpu: "10"
    requests.memory: "20Gi"
    limits.cpu: "20"
    limits.memory: "40Gi"
    persistentvolumeclaims: "10"
    pods: "50"
    services: "10"
    secrets: "10"
    configmaps: "10"

---
# Limit Range
apiVersion: v1
kind: LimitRange
metadata:
  name: codeguardian-limits
  namespace: codeguardian
spec:
  limits:
  - type: Container
    default:
      cpu: "500m"
      memory: "512Mi"
    defaultRequest:
      cpu: "100m"
      memory: "128Mi"
    max:
      cpu: "2"
      memory: "4Gi"
    min:
      cpu: "50m"
      memory: "64Mi"
  - type: Pod
    max:
      cpu: "4"
      memory: "8Gi"

