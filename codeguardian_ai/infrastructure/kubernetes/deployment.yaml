apiVersion: apps/v1
kind: Deployment
metadata:
  name: codeguardian-ai
  namespace: codeguardian-ai
  labels:
    app: codeguardian-ai
    version: v2.0.0
    tier: backend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: codeguardian-ai
  template:
    metadata:
      labels:
        app: codeguardian-ai
        version: v2.0.0
        tier: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: codeguardian-ai
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: codeguardian-ai
        image: codeguardian-ai:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 5001
          protocol: TCP
        - name: metrics
          containerPort: 8080
          protocol: TCP
        env:
        - name: FLASK_ENV
          value: "production"
        - name: FLASK_DEBUG
          value: "false"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: codeguardian-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: codeguardian-secrets
              key: redis-url
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: codeguardian-secrets
              key: secret-key
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: codeguardian-secrets
              key: jwt-secret-key
        - name: LOG_LEVEL
          value: "INFO"
        - name: PROMETHEUS_ENABLED
          value: "true"
        - name: JAEGER_ENABLED
          value: "true"
        - name: RATE_LIMITING_ENABLED
          value: "true"
        - name: MAX_LOGIN_ATTEMPTS
          value: "5"
        - name: LOCKOUT_DURATION_MINUTES
          value: "15"
        livenessProbe:
          httpGet:
            path: /api/health/live
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health/ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /api/health/startup
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: config
        configMap:
          name: codeguardian-config
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - codeguardian-ai
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

---
apiVersion: v1
kind: Service
metadata:
  name: codeguardian-ai
  namespace: codeguardian-ai
  labels:
    app: codeguardian-ai
    tier: backend
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "5001"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 8080
    targetPort: metrics
    protocol: TCP
  selector:
    app: codeguardian-ai

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: codeguardian-ai
  namespace: codeguardian-ai
  labels:
    app: codeguardian-ai

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: codeguardian-ai
  name: codeguardian-ai
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: codeguardian-ai
  namespace: codeguardian-ai
subjects:
- kind: ServiceAccount
  name: codeguardian-ai
  namespace: codeguardian-ai
roleRef:
  kind: Role
  name: codeguardian-ai
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: codeguardian-config
  namespace: codeguardian-ai
data:
  app.conf: |
    # CodeGuardian AI Configuration
    [security]
    max_request_size = 10485760
    csrf_protection = true
    secure_headers = true
    
    [rate_limiting]
    algorithm = adaptive
    global_limit = 10000
    per_ip_limit = 100
    per_user_limit = 1000
    
    [monitoring]
    prometheus_enabled = true
    jaeger_enabled = true
    log_level = INFO
    
    [database]
    pool_size = 10
    max_overflow = 20
    pool_timeout = 30
    pool_recycle = 3600

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: codeguardian-ai-hpa
  namespace: codeguardian-ai
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: codeguardian-ai
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: codeguardian-ai-pdb
  namespace: codeguardian-ai
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: codeguardian-ai

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: codeguardian-ai-netpol
  namespace: codeguardian-ai
spec:
  podSelector:
    matchLabels:
      app: codeguardian-ai
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 5001
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: codeguardian-ai
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
  - to: []
    ports:
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS
    - protocol: TCP
      port: 443  # HTTPS
    - protocol: TCP
      port: 80   # HTTP

